const request = require('supertest');
const app = require('../../server');
const User = require('../../models/User');

// Mock user data for testing
const userData = {
  firstName: 'Test',
  lastName: 'User',
  email: 'test@example.com',
  password: 'password123'
};

// Clear the User collection in the database before each test
beforeEach(async () => {
  await User.deleteMany();
});

describe('Authentication Routes', () => {
  // Test user signup
  describe('POST /api/auth/signup', () => {
    it('should register a new user', async () => {
      const res = await request(app)
        .post('/api/auth/signup')
        .send(userData);
      expect(res.statusCode).toEqual(201);
      expect(res.body).toHaveProperty('message', 'User registered successfully');
      // Additional assertions if needed
    });

    it('should return 400 if email already exists', async () => {
      // Register a user with the same email first
      await User.create(userData);
      const res = await request(app)
        .post('/api/auth/signup')
        .send(userData);
      expect(res.statusCode).toEqual(400);
      expect(res.body).toHaveProperty('message', 'Email already exists');
    });
  });

  // Test user login
  describe('POST /api/auth/login', () => {
    it('should authenticate and login a user', async () => {
      // Register a user first
      await User.create(userData);
      const res = await request(app)
        .post('/api/auth/login')
        .send({ email: userData.email, password: userData.password });
      expect(res.statusCode).toEqual(200);
      expect(res.body).toHaveProperty('token');
      // Additional assertions if needed
    });

    it('should return 401 if email or password is incorrect', async () => {
      const res = await request(app)
        .post('/api/auth/login')
        .send({ email: 'wrongemail@example.com', password: 'wrongpassword' });
      expect(res.statusCode).toEqual(401);
      expect(res.body).toHaveProperty('message', 'Invalid email or password');
    });
  });
});
